// Code generated by ogen, DO NOT EDIT.

package server

import (
	"github.com/go-faster/jx"
)

type EvaluateAccessOK struct {
	Decision bool `json:"decision"`
}

// GetDecision returns the value of Decision.
func (s *EvaluateAccessOK) GetDecision() bool {
	return s.Decision
}

// SetDecision sets the value of Decision.
func (s *EvaluateAccessOK) SetDecision(val bool) {
	s.Decision = val
}

type EvaluateAccessReq struct {
	Subject  EvaluateAccessReqSubject     `json:"subject"`
	Resource EvaluateAccessReqResource    `json:"resource"`
	Action   EvaluateAccessReqAction      `json:"action"`
	Constext OptEvaluateAccessReqConstext `json:"constext"`
}

// GetSubject returns the value of Subject.
func (s *EvaluateAccessReq) GetSubject() EvaluateAccessReqSubject {
	return s.Subject
}

// GetResource returns the value of Resource.
func (s *EvaluateAccessReq) GetResource() EvaluateAccessReqResource {
	return s.Resource
}

// GetAction returns the value of Action.
func (s *EvaluateAccessReq) GetAction() EvaluateAccessReqAction {
	return s.Action
}

// GetConstext returns the value of Constext.
func (s *EvaluateAccessReq) GetConstext() OptEvaluateAccessReqConstext {
	return s.Constext
}

// SetSubject sets the value of Subject.
func (s *EvaluateAccessReq) SetSubject(val EvaluateAccessReqSubject) {
	s.Subject = val
}

// SetResource sets the value of Resource.
func (s *EvaluateAccessReq) SetResource(val EvaluateAccessReqResource) {
	s.Resource = val
}

// SetAction sets the value of Action.
func (s *EvaluateAccessReq) SetAction(val EvaluateAccessReqAction) {
	s.Action = val
}

// SetConstext sets the value of Constext.
func (s *EvaluateAccessReq) SetConstext(val OptEvaluateAccessReqConstext) {
	s.Constext = val
}

type EvaluateAccessReqAction struct {
	Name       string                               `json:"name"`
	Properties OptEvaluateAccessReqActionProperties `json:"properties"`
}

// GetName returns the value of Name.
func (s *EvaluateAccessReqAction) GetName() string {
	return s.Name
}

// GetProperties returns the value of Properties.
func (s *EvaluateAccessReqAction) GetProperties() OptEvaluateAccessReqActionProperties {
	return s.Properties
}

// SetName sets the value of Name.
func (s *EvaluateAccessReqAction) SetName(val string) {
	s.Name = val
}

// SetProperties sets the value of Properties.
func (s *EvaluateAccessReqAction) SetProperties(val OptEvaluateAccessReqActionProperties) {
	s.Properties = val
}

type EvaluateAccessReqActionProperties map[string]jx.Raw

func (s *EvaluateAccessReqActionProperties) init() EvaluateAccessReqActionProperties {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type EvaluateAccessReqConstext map[string]jx.Raw

func (s *EvaluateAccessReqConstext) init() EvaluateAccessReqConstext {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type EvaluateAccessReqResource struct {
	Type       string                                 `json:"type"`
	ID         string                                 `json:"id"`
	Properties OptEvaluateAccessReqResourceProperties `json:"properties"`
}

// GetType returns the value of Type.
func (s *EvaluateAccessReqResource) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *EvaluateAccessReqResource) GetID() string {
	return s.ID
}

// GetProperties returns the value of Properties.
func (s *EvaluateAccessReqResource) GetProperties() OptEvaluateAccessReqResourceProperties {
	return s.Properties
}

// SetType sets the value of Type.
func (s *EvaluateAccessReqResource) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *EvaluateAccessReqResource) SetID(val string) {
	s.ID = val
}

// SetProperties sets the value of Properties.
func (s *EvaluateAccessReqResource) SetProperties(val OptEvaluateAccessReqResourceProperties) {
	s.Properties = val
}

type EvaluateAccessReqResourceProperties struct {
	OwnerID         OptString `json:"ownerID"`
	AdditionalProps EvaluateAccessReqResourcePropertiesAdditional
}

// GetOwnerID returns the value of OwnerID.
func (s *EvaluateAccessReqResourceProperties) GetOwnerID() OptString {
	return s.OwnerID
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *EvaluateAccessReqResourceProperties) GetAdditionalProps() EvaluateAccessReqResourcePropertiesAdditional {
	return s.AdditionalProps
}

// SetOwnerID sets the value of OwnerID.
func (s *EvaluateAccessReqResourceProperties) SetOwnerID(val OptString) {
	s.OwnerID = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *EvaluateAccessReqResourceProperties) SetAdditionalProps(val EvaluateAccessReqResourcePropertiesAdditional) {
	s.AdditionalProps = val
}

type EvaluateAccessReqResourcePropertiesAdditional map[string]jx.Raw

func (s *EvaluateAccessReqResourcePropertiesAdditional) init() EvaluateAccessReqResourcePropertiesAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type EvaluateAccessReqSubject struct {
	Type       string                                `json:"type"`
	ID         string                                `json:"id"`
	Properties OptEvaluateAccessReqSubjectProperties `json:"properties"`
}

// GetType returns the value of Type.
func (s *EvaluateAccessReqSubject) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *EvaluateAccessReqSubject) GetID() string {
	return s.ID
}

// GetProperties returns the value of Properties.
func (s *EvaluateAccessReqSubject) GetProperties() OptEvaluateAccessReqSubjectProperties {
	return s.Properties
}

// SetType sets the value of Type.
func (s *EvaluateAccessReqSubject) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *EvaluateAccessReqSubject) SetID(val string) {
	s.ID = val
}

// SetProperties sets the value of Properties.
func (s *EvaluateAccessReqSubject) SetProperties(val OptEvaluateAccessReqSubjectProperties) {
	s.Properties = val
}

type EvaluateAccessReqSubjectProperties map[string]jx.Raw

func (s *EvaluateAccessReqSubjectProperties) init() EvaluateAccessReqSubjectProperties {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// NewOptEvaluateAccessReqActionProperties returns new OptEvaluateAccessReqActionProperties with value set to v.
func NewOptEvaluateAccessReqActionProperties(v EvaluateAccessReqActionProperties) OptEvaluateAccessReqActionProperties {
	return OptEvaluateAccessReqActionProperties{
		Value: v,
		Set:   true,
	}
}

// OptEvaluateAccessReqActionProperties is optional EvaluateAccessReqActionProperties.
type OptEvaluateAccessReqActionProperties struct {
	Value EvaluateAccessReqActionProperties
	Set   bool
}

// IsSet returns true if OptEvaluateAccessReqActionProperties was set.
func (o OptEvaluateAccessReqActionProperties) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEvaluateAccessReqActionProperties) Reset() {
	var v EvaluateAccessReqActionProperties
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEvaluateAccessReqActionProperties) SetTo(v EvaluateAccessReqActionProperties) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEvaluateAccessReqActionProperties) Get() (v EvaluateAccessReqActionProperties, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEvaluateAccessReqActionProperties) Or(d EvaluateAccessReqActionProperties) EvaluateAccessReqActionProperties {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEvaluateAccessReqConstext returns new OptEvaluateAccessReqConstext with value set to v.
func NewOptEvaluateAccessReqConstext(v EvaluateAccessReqConstext) OptEvaluateAccessReqConstext {
	return OptEvaluateAccessReqConstext{
		Value: v,
		Set:   true,
	}
}

// OptEvaluateAccessReqConstext is optional EvaluateAccessReqConstext.
type OptEvaluateAccessReqConstext struct {
	Value EvaluateAccessReqConstext
	Set   bool
}

// IsSet returns true if OptEvaluateAccessReqConstext was set.
func (o OptEvaluateAccessReqConstext) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEvaluateAccessReqConstext) Reset() {
	var v EvaluateAccessReqConstext
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEvaluateAccessReqConstext) SetTo(v EvaluateAccessReqConstext) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEvaluateAccessReqConstext) Get() (v EvaluateAccessReqConstext, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEvaluateAccessReqConstext) Or(d EvaluateAccessReqConstext) EvaluateAccessReqConstext {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEvaluateAccessReqResourceProperties returns new OptEvaluateAccessReqResourceProperties with value set to v.
func NewOptEvaluateAccessReqResourceProperties(v EvaluateAccessReqResourceProperties) OptEvaluateAccessReqResourceProperties {
	return OptEvaluateAccessReqResourceProperties{
		Value: v,
		Set:   true,
	}
}

// OptEvaluateAccessReqResourceProperties is optional EvaluateAccessReqResourceProperties.
type OptEvaluateAccessReqResourceProperties struct {
	Value EvaluateAccessReqResourceProperties
	Set   bool
}

// IsSet returns true if OptEvaluateAccessReqResourceProperties was set.
func (o OptEvaluateAccessReqResourceProperties) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEvaluateAccessReqResourceProperties) Reset() {
	var v EvaluateAccessReqResourceProperties
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEvaluateAccessReqResourceProperties) SetTo(v EvaluateAccessReqResourceProperties) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEvaluateAccessReqResourceProperties) Get() (v EvaluateAccessReqResourceProperties, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEvaluateAccessReqResourceProperties) Or(d EvaluateAccessReqResourceProperties) EvaluateAccessReqResourceProperties {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEvaluateAccessReqSubjectProperties returns new OptEvaluateAccessReqSubjectProperties with value set to v.
func NewOptEvaluateAccessReqSubjectProperties(v EvaluateAccessReqSubjectProperties) OptEvaluateAccessReqSubjectProperties {
	return OptEvaluateAccessReqSubjectProperties{
		Value: v,
		Set:   true,
	}
}

// OptEvaluateAccessReqSubjectProperties is optional EvaluateAccessReqSubjectProperties.
type OptEvaluateAccessReqSubjectProperties struct {
	Value EvaluateAccessReqSubjectProperties
	Set   bool
}

// IsSet returns true if OptEvaluateAccessReqSubjectProperties was set.
func (o OptEvaluateAccessReqSubjectProperties) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEvaluateAccessReqSubjectProperties) Reset() {
	var v EvaluateAccessReqSubjectProperties
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEvaluateAccessReqSubjectProperties) SetTo(v EvaluateAccessReqSubjectProperties) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEvaluateAccessReqSubjectProperties) Get() (v EvaluateAccessReqSubjectProperties, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEvaluateAccessReqSubjectProperties) Or(d EvaluateAccessReqSubjectProperties) EvaluateAccessReqSubjectProperties {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
